Consolidate compiler generated dependencies of target hpx_adjacent_difference
[ 50%] Building CXX object CMakeFiles/hpx_adjacent_difference.dir/adjacent_difference.cpp.o
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp: In function ‘double test(ExPolicy, std::size_t)’:
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:42:46: warning: ‘using adaptive_core_chunk_size = struct hpx::execution::experimental::adaptive_core_chunk_size’ is deprecated: hpx::execution::auto_chunk_size is deprecated, use hpx::execution::experimental::auto_chunk_size instead (This functionality is deprecated starting HPX V1.9 and will be removed in the future. You can define HPX_HAVE_DEPRECATION_WARNINGS_V1_9=0 to acknowledge that you have received this warning.) [-Wdeprecated-declarations]
   42 |     hpx::execution::adaptive_core_chunk_size acc;
      |                                              ^~~
In file included from /work/karame.mp/build_dir/hpx/build/libs/core/execution/include/hpx/modules/execution.hpp:36,
                 from /work/karame.mp/build_dir/hpx/libs/core/algorithms/include/hpx/parallel/util/zip_iterator.hpp:14,
                 from /work/karame.mp/build_dir/hpx/libs/core/algorithms/include/hpx/parallel/algorithms/adjacent_find.hpp:140,
                 from /work/karame.mp/build_dir/hpx/libs/core/algorithms/include/hpx/parallel/algorithm.hpp:18,
                 from /work/karame.mp/build_dir/hpx/libs/core/include_local/include/hpx/local/algorithm.hpp:10,
                 from /work/karame.mp/build_dir/hpx/libs/full/include/include/hpx/algorithm.hpp:9,
                 from /work/karame.mp/build_dir/hpx/libs/full/include/include/hpx/hpx.hpp:10,
                 from /work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:1:
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/adaptive_core_chunk_size.hpp:333:19: note: declared here
  333 |             using adaptive_core_chunk_size HPX_DEPRECATED_V(1, 9,
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/adaptive_core_chunk_size.hpp: In instantiation of ‘constexpr std::size_t hpx::execution::experimental::adaptive_core_chunk_size::processing_units_count(Executor&&, const hpx::chrono::steady_duration&, std::size_t) const [with Executor = hpx::compute::host::block_executor<>&; std::size_t = long unsigned int]’:
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters.hpp:395:60:   required from ‘static constexpr std::size_t hpx::parallel::execution::detail::processing_units_count_fn_helper<Parameters, Executor_, typename std::enable_if<is_executor_any_v<Executor_>, void>::type>::call(Parameters&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Executor = hpx::compute::host::block_executor<>&; Parameters = hpx::execution::experimental::adaptive_core_chunk_size; Executor_ = hpx::compute::host::block_executor<>; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters_fwd.hpp:266:46:   required from ‘decltype(auto) hpx::parallel::execution::tag_fallback_invoke(processing_units_count_t, Parameters&&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Parameters = hpx::execution::experimental::adaptive_core_chunk_size&; Executor = hpx::compute::host::block_executor<>&; int _concept_requires_254 = 42; typename std::enable_if<((_concept_requires_91 == 43) || (hpx::traits::is_executor_parameters<T>::value && hpx::traits::is_executor_any<Executor>::value)), int>::type _concept_check_254 = 0; processing_units_count_t = processing_units_count_t; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:130:52:   required by substitution of ‘template<class Tag, class ... Ts> constexpr decltype (hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke(declval<Tag>(), static_cast<decltype(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts)&&>(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts) ...)) hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()(Tag, Ts&& ...) const [with Tag = hpx::parallel::execution::processing_units_count_t; Ts = {hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:28:17:   required by substitution of ‘template<class F, class ... Ts> struct hpx::util::detail::invoke_result_impl<F(Ts ...), std::void_t<decltype ((typename hpx::util::detail::dispatch_invoke<decltype (declval<F>()), typename std::remove_cv<typename std::remove_reference<decltype (declval<F>())>::type>::type>::type)(declval<F>())((declval<Ts>)()...))> > [with F = const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t&&; Ts = {hpx::parallel::execution::processing_units_count_t&&, hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::parallel::execution::processing_units_count_t, hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::adjacent_difference_t, hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   required by substitution of ‘template<class Tag, class ... Args> using tag_fallback_invoke_result_t = typename hpx::functional::detail::tag_fallback_invoke_result<Tag, Args ...>::type [with Tag = hpx::adjacent_difference_t; Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60:   required by substitution of ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<hpx::adjacent_difference_t, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<hpx::adjacent_difference_t, hpx::meta::constant<std::integral_constant<bool, true> > >::operator()(Args&& ...) const [with Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >}; <template-parameter-1-2> = void]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:57:33:   required from ‘double test(ExPolicy, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:78:35:   required from ‘auto test3(ExPolicy, std::size_t, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:94:27:   required from here
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/adaptive_core_chunk_size.hpp:157:57: error: no match for call to ‘(const hpx::parallel::execution::processing_units_count_t) (hpx::compute::host::block_executor<>&, const hpx::chrono::steady_duration&, std::size_t&)’
  157 |         hpx::parallel::execution::processing_units_count(HPX_FORWARD(Executor, exec), iteration_duration, count);
      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /work/karame.mp/build_dir/hpx/libs/core/execution_base/include/hpx/execution_base/execution.hpp:13,
                 from /work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution.hpp:14,
                 from /work/karame.mp/build_dir/hpx/libs/core/executors/include/hpx/executors/annotating_executor.hpp:12,
                 from /work/karame.mp/build_dir/hpx/build/libs/core/executors/include/hpx/modules/executors.hpp:14,
                 from /work/karame.mp/build_dir/hpx/libs/core/algorithms/include/hpx/parallel/algorithms/adjacent_difference.hpp:225,
                 from /work/karame.mp/build_dir/hpx/libs/core/algorithms/include/hpx/parallel/algorithm.hpp:17:
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:268:60: note: candidate: ‘template<class ... Args, class> constexpr hpx::functional::tag_invoke_result_t<Tag, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<Tag, Enable>::operator()(Args&& ...) const [with Args = {Args ...}; Tag = hpx::parallel::execution::processing_units_count_t; Enable = hpx::meta::constant<std::integral_constant<bool, true> >]’
  268 |             HPX_HOST_DEVICE HPX_FORCEINLINE constexpr auto operator()(
      |                                                            ^~~~~~~~
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:268:60: note:   template argument deduction/substitution failed:
In file included from /work/karame.mp/build_dir/hpx/libs/core/config/include/hpx/config/move.hpp:17,
                 from /work/karame.mp/build_dir/hpx/libs/core/config/include/hpx/config.hpp:34,
                 from /work/karame.mp/build_dir/hpx/libs/full/include/include/hpx/hpx.hpp:9:
/opt/apps/gcc/12.2.0/include/c++/12.2.0/type_traits: In substitution of ‘template<bool _Cond, class _Tp> using enable_if_t = typename std::enable_if::type [with bool _Cond = false; _Tp = void]’:
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:265:17:   required from ‘constexpr std::size_t hpx::execution::experimental::adaptive_core_chunk_size::processing_units_count(Executor&&, const hpx::chrono::steady_duration&, std::size_t) const [with Executor = hpx::compute::host::block_executor<>&; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters.hpp:395:60:   required from ‘static constexpr std::size_t hpx::parallel::execution::detail::processing_units_count_fn_helper<Parameters, Executor_, typename std::enable_if<is_executor_any_v<Executor_>, void>::type>::call(Parameters&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Executor = hpx::compute::host::block_executor<>&; Parameters = hpx::execution::experimental::adaptive_core_chunk_size; Executor_ = hpx::compute::host::block_executor<>; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters_fwd.hpp:266:46:   required from ‘decltype(auto) hpx::parallel::execution::tag_fallback_invoke(processing_units_count_t, Parameters&&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Parameters = hpx::execution::experimental::adaptive_core_chunk_size&; Executor = hpx::compute::host::block_executor<>&; int _concept_requires_254 = 42; typename std::enable_if<((_concept_requires_91 == 43) || (hpx::traits::is_executor_parameters<T>::value && hpx::traits::is_executor_any<Executor>::value)), int>::type _concept_check_254 = 0; processing_units_count_t = processing_units_count_t; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:130:52:   required by substitution of ‘template<class Tag, class ... Ts> constexpr decltype (hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke(declval<Tag>(), static_cast<decltype(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts)&&>(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts) ...)) hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()(Tag, Ts&& ...) const [with Tag = hpx::parallel::execution::processing_units_count_t; Ts = {hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:28:17:   required by substitution of ‘template<class F, class ... Ts> struct hpx::util::detail::invoke_result_impl<F(Ts ...), std::void_t<decltype ((typename hpx::util::detail::dispatch_invoke<decltype (declval<F>()), typename std::remove_cv<typename std::remove_reference<decltype (declval<F>())>::type>::type>::type)(declval<F>())((declval<Ts>)()...))> > [with F = const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t&&; Ts = {hpx::parallel::execution::processing_units_count_t&&, hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   [ skipping 12 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::adjacent_difference_t, hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   required by substitution of ‘template<class Tag, class ... Args> using tag_fallback_invoke_result_t = typename hpx::functional::detail::tag_fallback_invoke_result<Tag, Args ...>::type [with Tag = hpx::adjacent_difference_t; Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60:   required by substitution of ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<hpx::adjacent_difference_t, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<hpx::adjacent_difference_t, hpx::meta::constant<std::integral_constant<bool, true> > >::operator()(Args&& ...) const [with Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >}; <template-parameter-1-2> = void]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:57:33:   required from ‘double test(ExPolicy, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:78:35:   required from ‘auto test3(ExPolicy, std::size_t, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:94:27:   required from here
/opt/apps/gcc/12.2.0/include/c++/12.2.0/type_traits:2614:11: error: no type named ‘type’ in ‘struct std::enable_if<false, void>’
 2614 |     using enable_if_t = typename enable_if<_Cond, _Tp>::type;
      |           ^~~~~~~~~~~
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/adaptive_core_chunk_size.hpp: In instantiation of ‘constexpr std::size_t hpx::execution::experimental::adaptive_core_chunk_size::processing_units_count(Executor&&, const hpx::chrono::steady_duration&, std::size_t) const [with Executor = hpx::compute::host::block_executor<>&; std::size_t = long unsigned int]’:
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters.hpp:395:60:   required from ‘static constexpr std::size_t hpx::parallel::execution::detail::processing_units_count_fn_helper<Parameters, Executor_, typename std::enable_if<is_executor_any_v<Executor_>, void>::type>::call(Parameters&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Executor = hpx::compute::host::block_executor<>&; Parameters = hpx::execution::experimental::adaptive_core_chunk_size; Executor_ = hpx::compute::host::block_executor<>; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters_fwd.hpp:266:46:   required from ‘decltype(auto) hpx::parallel::execution::tag_fallback_invoke(processing_units_count_t, Parameters&&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Parameters = hpx::execution::experimental::adaptive_core_chunk_size&; Executor = hpx::compute::host::block_executor<>&; int _concept_requires_254 = 42; typename std::enable_if<((_concept_requires_91 == 43) || (hpx::traits::is_executor_parameters<T>::value && hpx::traits::is_executor_any<Executor>::value)), int>::type _concept_check_254 = 0; processing_units_count_t = processing_units_count_t; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:130:52:   required by substitution of ‘template<class Tag, class ... Ts> constexpr decltype (hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke(declval<Tag>(), static_cast<decltype(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts)&&>(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts) ...)) hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()(Tag, Ts&& ...) const [with Tag = hpx::parallel::execution::processing_units_count_t; Ts = {hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:28:17:   required by substitution of ‘template<class F, class ... Ts> struct hpx::util::detail::invoke_result_impl<F(Ts ...), std::void_t<decltype ((typename hpx::util::detail::dispatch_invoke<decltype (declval<F>()), typename std::remove_cv<typename std::remove_reference<decltype (declval<F>())>::type>::type>::type)(declval<F>())((declval<Ts>)()...))> > [with F = const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t&&; Ts = {hpx::parallel::execution::processing_units_count_t&&, hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::parallel::execution::processing_units_count_t, hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   [ skipping 11 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::adjacent_difference_t, hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   required by substitution of ‘template<class Tag, class ... Args> using tag_fallback_invoke_result_t = typename hpx::functional::detail::tag_fallback_invoke_result<Tag, Args ...>::type [with Tag = hpx::adjacent_difference_t; Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60:   required by substitution of ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<hpx::adjacent_difference_t, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<hpx::adjacent_difference_t, hpx::meta::constant<std::integral_constant<bool, true> > >::operator()(Args&& ...) const [with Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >}; <template-parameter-1-2> = void]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:57:33:   required from ‘double test(ExPolicy, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:78:35:   required from ‘auto test3(ExPolicy, std::size_t, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:94:27:   required from here
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60: note: candidate: ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<Tag, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<Tag, Enable>::operator()(Args&& ...) const [with Args = {Args ...}; Tag = hpx::parallel::execution::processing_units_count_t; Enable = hpx::meta::constant<std::integral_constant<bool, true> >]’
  281 |             HPX_HOST_DEVICE HPX_FORCEINLINE constexpr auto operator()(
      |                                                            ^~~~~~~~
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60: note:   template argument deduction/substitution failed:
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp: In substitution of ‘template<class Tag, class ... Args> using tag_fallback_invoke_result_t = typename hpx::functional::detail::tag_fallback_invoke_result<Tag, Args ...>::type [with Tag = hpx::parallel::execution::processing_units_count_t; Args = {hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, const hpx::chrono::steady_duration&, long unsigned int&}]’:
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60:   required by substitution of ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<hpx::parallel::execution::processing_units_count_t, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<hpx::parallel::execution::processing_units_count_t, hpx::meta::constant<std::integral_constant<bool, true> > >::operator()(Args&& ...) const [with Args = {hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, const hpx::chrono::steady_duration&, long unsigned int&}; <template-parameter-1-2> = void]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/adaptive_core_chunk_size.hpp:157:57:   required from ‘constexpr std::size_t hpx::execution::experimental::adaptive_core_chunk_size::processing_units_count(Executor&&, const hpx::chrono::steady_duration&, std::size_t) const [with Executor = hpx::compute::host::block_executor<>&; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters.hpp:395:60:   required from ‘static constexpr std::size_t hpx::parallel::execution::detail::processing_units_count_fn_helper<Parameters, Executor_, typename std::enable_if<is_executor_any_v<Executor_>, void>::type>::call(Parameters&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Executor = hpx::compute::host::block_executor<>&; Parameters = hpx::execution::experimental::adaptive_core_chunk_size; Executor_ = hpx::compute::host::block_executor<>; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/execution/include/hpx/execution/executors/execution_parameters_fwd.hpp:266:46:   required from ‘decltype(auto) hpx::parallel::execution::tag_fallback_invoke(processing_units_count_t, Parameters&&, Executor&&, const hpx::chrono::steady_duration&, std::size_t) [with Parameters = hpx::execution::experimental::adaptive_core_chunk_size&; Executor = hpx::compute::host::block_executor<>&; int _concept_requires_254 = 42; typename std::enable_if<((_concept_requires_91 == 43) || (hpx::traits::is_executor_parameters<T>::value && hpx::traits::is_executor_any<Executor>::value)), int>::type _concept_check_254 = 0; processing_units_count_t = processing_units_count_t; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:130:52:   required by substitution of ‘template<class Tag, class ... Ts> constexpr decltype (hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke(declval<Tag>(), static_cast<decltype(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts)&&>(hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()::ts) ...)) hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t::operator()(Tag, Ts&& ...) const [with Tag = hpx::parallel::execution::processing_units_count_t; Ts = {hpx::execution::experimental::adaptive_core_chunk_size&, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, std::chrono::duration<long int, std::ratio<1, 1000000000> >&, long unsigned int&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:28:17:   [ skipping 13 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/invoke_result.hpp:38:12:   required from ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::adjacent_difference_t, hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&>’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11:   required by substitution of ‘template<class Tag, class ... Args> using tag_fallback_invoke_result_t = typename hpx::functional::detail::tag_fallback_invoke_result<Tag, Args ...>::type [with Tag = hpx::adjacent_difference_t; Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >&&}]’
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:281:60:   required by substitution of ‘template<class ... Args, class> constexpr hpx::functional::detail::tag_fallback_invoke_result_t<hpx::adjacent_difference_t, Args&& ...> hpx::functional::detail::tag_base_ns::tag_fallback<hpx::adjacent_difference_t, hpx::meta::constant<std::integral_constant<bool, true> > >::operator()(Args&& ...) const [with Args = {hpx::execution::detail::parallel_policy_shim<hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >, hpx::execution::experimental::adaptive_core_chunk_size>, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >, hpx::compute::detail::iterator<float, hpx::compute::host::block_allocator<float, hpx::parallel::execution::restricted_policy_executor<hpx::launch> > >}; <template-parameter-1-2> = void]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:57:33:   required from ‘double test(ExPolicy, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:78:35:   required from ‘auto test3(ExPolicy, std::size_t, std::size_t) [with ExPolicy = hpx::execution::detail::parallel_policy_shim<hpx::execution::parallel_policy_executor<hpx::launch> >; std::size_t = long unsigned int]’
/work/karame.mp/build_dir/benchmark/adjacent_difference.cpp:94:27:   required from here
/work/karame.mp/build_dir/hpx/libs/core/tag_invoke/include/hpx/functional/detail/tag_fallback_invoke.hpp:217:11: error: no type named ‘type’ in ‘hpx::functional::detail::tag_fallback_invoke_result<hpx::parallel::execution::processing_units_count_t, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, const hpx::chrono::steady_duration&, long unsigned int&>’ {aka ‘struct hpx::util::invoke_result<const hpx::functional::detail::tag_fallback_invoke_t_ns::tag_fallback_invoke_t, hpx::parallel::execution::processing_units_count_t, hpx::compute::host::block_executor<hpx::parallel::execution::restricted_policy_executor<hpx::launch> >&, const hpx::chrono::steady_duration&, long unsigned int&>’}
  217 |     using tag_fallback_invoke_result_t =
      |           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
make[2]: *** [CMakeFiles/hpx_adjacent_difference.dir/build.make:76: CMakeFiles/hpx_adjacent_difference.dir/adjacent_difference.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:83: CMakeFiles/hpx_adjacent_difference.dir/all] Error 2
make: *** [Makefile:91: all] Error 2
